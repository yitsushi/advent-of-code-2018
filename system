#!/usr/bin/env python3

import fire
import os
import time
import importlib
from typing import List, Tuple


SOLUTION_TEMPLATE = '''from advent_of_code import BaseSolution


class Solution(BaseSolution):
    def setup(self):
        pass
'''


class AdventOfCodeSolver(object):
    """Advent of Code 2018 puzzle solver"""

    measurements: List[Tuple[str, float]]
    debug: bool

    def __init__(self):
        self.debug = os.getenv('DEBUG', None) is not None

    def init(self, day):
        if self.__is_day_exists(day):
            print('Solution directory already exists!')
            return

        os.mkdir(self.__day_path(day))

        with open(self.__solution_path(day), 'w') as f:
            f.write(SOLUTION_TEMPLATE)

        print('Done.')

    def solve(self, day, part, *parameters):
        if not self.__is_day_exists(day):
            raise Exception("Solution does not exist for day-%02d" % day)

        self.measurements: List[Tuple[str, float]] = []

        module = importlib.import_module("day%02d" % day)
        solution = getattr(module, "Solution")(self.__day_path(day), self._report_time, list(parameters))
        self.measurements.append(('start', time.time()))
        solution.setup()
        self._report_time('setup')

        answer = None
        try:
            answer = getattr(solution, 'part%d' % part)()
        except NotImplementedError as error:
            print(error)

        self._report_time('solution')

        print('The solution for day-{:02d}/part{:d}:\n{}'.format(day, part, answer))

        self.__time_report()

    def __time_report(self):
        print('\nTiming:')
        full_time = self.measurements[-1][1] - self.measurements[0][1]
        base_time = self.measurements.pop(0)
        longest_name = max([len(c[0]) for c in self.measurements])
        template = '  {:%ds}: {:.4f}s' % longest_name
        while len(self.measurements) > 0:
            current_time = self.measurements.pop(0)
            print(template.format(current_time[0], current_time[1] - base_time[1]))
            base_time = current_time
        print()
        print(template.format('full', full_time))

    @staticmethod
    def __project_root():
        return os.path.dirname(os.path.realpath(__file__))

    def __day_path(self, day):
        return os.path.join(self.__project_root(), 'day%02d' % day)

    def __is_day_exists(self, day):
        return os.path.isdir(self.__day_path(day)) and os.path.isfile(os.path.join(self.__day_path(day), '__init__.py'))

    def __solution_path(self, day):
        return os.path.join(self.__day_path(day), '__init__.py')

    def _report_time(self, name):
        t = time.time()
        if self.debug:
            print(' [{1:10.4f}] >>> {0:20s}'.format(name, t - self.measurements[-1][1]))
        self.measurements.append((name, t))


if __name__ == '__main__':
    fire.Fire(AdventOfCodeSolver)
